<?php

/**
 * @file
 * Functions to support theming in the di_stlawu theme.
 */

use Drupal\Component\Utility\Html;
use Symfony\Cmf\Component\Routing\RouteObjectInterface;

/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */
function di_stlawu_preprocess_html(array &$variables) {
  /* Add class to html tag */
  //$variables['html_attributes']->addClass('no-js');

  // Don't display the site name twice on the front page (and potentially others)
  /*if (isset($variables['head_title_array']['title']) && isset($variables['head_title_array']['name']) && ($variables['head_title_array']['title'] == $variables['head_title_array']['name'])) {
    $variables['head_title'] = $variables['head_title_array']['name'];
  }*/

  // Add information about the number of sidebars.
  if (!empty($variables['page']['sidebar_first']) && !empty($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = 'layout-two-sidebars';
  }
  elseif (!empty($variables['page']['sidebar_first'])) {
    $variables['attributes']['class'][] = 'layout-one-sidebar';
    $variables['attributes']['class'][] = 'layout-sidebar-first';
  }
  elseif (!empty($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = 'layout-one-sidebar';
    $variables['attributes']['class'][] = 'layout-sidebar-second';
  }
  else {
    $variables['attributes']['class'][] = 'layout-no-sidebars';
  }

  // Add information about edge-to-edge.
  // if ($layout_type == 'layout-edge-to-edge') {
  //   $variables['attributes']['class'][] = 'layout-edge-to-edge';
  // }
  // else {
  //   $variables['attributes']['class'][] = 'layout-constrained';
  // }

}

/**
 * Implements hook_page_attachments_alter().
 */
function di_stlawu_page_attachments_alter(array &$page) {
  // Tell IE to use latest rendering engine (not to use compatibility mode).
  /*$ie_edge = [
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => [
    'http-equiv' => 'X-UA-Compatible',
    'content' => 'IE=edge',
    ],
  ];
  $page['#attached']['html_head'][] = [$ie_edge, 'ie_edge'];*/
}

/**
 * Implements hook_preprocess_page() for page.html.twig.
 */
function di_stlawu_preprocess_page(array &$variables) {
  // Get the current node.
  $node = \Drupal::routeMatch()->getParameter('node');
  // Load nodes that aren't objects? Somehow this helps...?
  if(!is_object($node) && is_int((int) $node)) {
    $node = Drupal\node\Entity\Node::load($node);
  }
  // Define which content types or pages (e.g., views that are displayed as pages?) will be edge-to-edge
  $edgetoedge = ['landing_page'];
  // Check if it's a node object first then check that it can be assigned to $node
  if (is_object($node)){
    // Get the content type
    $type = $node->getType();
    // if the content type is defined to be edge-to-edge
    if (in_array($type, $edgetoedge)){
      $variables['layout_type'] = 'layout-edge-to-edge';
    }
    // if the content type is NOT edge-to-edge
    else {
      $variables['layout_type'] = 'layout-constrained';
    }
  }
  // if the page is NOT edge-to-edge (and also NOT a content type)
  else {
    $variables['layout_type'] = 'layout-constrained';
  }

}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function di_stlawu_theme_suggestions_page_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_theme_suggestions_node_alter().
 */
function di_stlawu_theme_suggestions_node_alter(array &$suggestions, array $variables) {
  /*$node = $variables['elements']['#node'];

  if ($variables['elements']['#view_mode'] == "full") {

  }*/
}

/**
 * Implements hook_theme_suggestions_taxonomy_term_alter().
 */
function di_stlawu_theme_suggestions_taxonomy_term_alter(array &$suggestions, array $variables) {
  $bundle = $variables['elements']['name']['#bundle'];
  $view_mode = $variables['elements']['#view_mode'];
  $suggestions[] = 'taxonomy_term__' . $view_mode;
  $suggestions[] = 'taxonomy_term__' . $bundle . '__' . $view_mode;
}

/**
 * Implements hook_preprocess_HOOK() for Block document templates.
 */
function di_stlawu_preprocess_block(array &$variables) {

}

/**
 * Implements hook_preprocess_breadcrumb().
 */
function di_stlawu_preprocess_breadcrumb(&$variables) {
  // We are creating a variable for the Current Page Title, to allow us to print
  // it after the breadcrumbs loop has run.
  $request = \Drupal::request();
  if ($route = $request->attributes->get(RouteObjectInterface::ROUTE_OBJECT)) {
    // Search page titles aren't resolved using the title_resolver service - it
    // will always return 'Search' instead of 'Search for [term]', which would
    // give us a breadcrumb of Home >> Search >> Search.
    // @see https://www.drupal.org/project/drupal/issues/2359901
    // @see https://www.drupal.org/project/drupal/issues/2403359
    if (($entity = $request->attributes->get('entity')) && $entity->getEntityTypeId() === 'search_page') {
      $variables['current_page_title'] = $entity->getPlugin()->suggestedTitle();
    }
    else {
      $variables['current_page_title'] = \Drupal::service('title_resolver')->getTitle($request, $route);
    }
  }
  // Since we are printing the 'Current Page Title', add the URL cache context.
  // If we don't, then we might end up with something like
  // "Home > Articles" on the Recipes page, which should read "Home > Recipes".
  $variables['#cache']['contexts'][] = 'url';
}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function di_stlawu_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  /*$element = $variables['element'];
  $suggestions[] = 'field__' . $element['#view_mode'];
  $suggestions[] = 'field__' . $element['#view_mode'] . '__' . $element['#field_name'];*/
}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function di_stlawu_theme_suggestions_fieldset_alter(array &$suggestions, array $variables) {
  /*$element = $variables['element'];
  if (isset($element['#attributes']['class']) && in_array('form-composite', $element['#attributes']['class'])) {
    $suggestions[] = 'fieldset__form_composite';
  }*/
}

/**
 * Implements hook_preprocess_node().
 */
function di_stlawu_preprocess_node(array &$variables) {
  // Default to turning off byline/submitted.
  //$variables['display_submitted'] = FALSE;
}

/**
 * Implements hook_theme_suggestions_views_view_alter().
 */
function di_stlawu_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_preprocess_form().
 */
function di_stlawu_preprocess_form(array &$variables) {
  //$variables['attributes']['novalidate'] = 'novalidate';
}

/**
 * Implements hook_preprocess_select().
 */
function di_stlawu_preprocess_select(array &$variables) {
  //$variables['attributes']['class'][] = 'select-chosen';
}

/**
 * Implements hook_preprocess_field().
 */
function di_stlawu_preprocess_field(array &$variables, $hook) {
  /*switch ($variables['element']['#field_name']) {
  }*/
}

/**
 * Implements hook_preprocess_details().
 */
function di_stlawu_preprocess_details(array &$variables) {
  /*$variables['attributes']['class'][] = 'details';
  $variables['summary_attributes']['class'] = 'summary';*/
}

/**
 * Implements hook_theme_suggestions_details_alter().
 */
function di_stlawu_theme_suggestions_details_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_preprocess_menu_local_task().
 */
function di_stlawu_preprocess_menu_local_task(array &$variables) {
  //$variables['element']['#link']['url']->setOption('attributes', ['class'=>'rounded']);
}


/**
 * Implements hook_preprocess_paragraph__media().
 */
function di_stlawu_preprocess_paragraph__media(&$variables){
  $p = $variables['paragraph'];
  if($p && $p->field_media){
    $media = $p->field_media->entity;
    // Check for media entity and byline_freeform
    if($media && $media->hasField('field_media_byline_freeform')){
      // Setup has_byline_freeform boolean variable.
      $has_byline_freeform = $media->field_media_byline_freeform->value;
      $variables['has_byline_freeform'] = !empty($has_byline_freeform);
      // Render the media entity's field_media_byline_freeform on media paragraph type.
      $byline_freeform = $media->field_media_byline_freeform->view(['label' => 'hidden']);
      $variables['byline_freeform'] = $byline_freeform;
    }
    // Check for media entity and transcript
    if($media && $media->hasField('field_media_transcript')){
      // Setup has_transcript boolean variable.
      $has_transcript = $media->field_media_transcript->value;
      $variables['has_transcript'] = !empty($has_transcript);
      // Render the media entity's field_media_transcript on media paragraph type.
      $transcript = $media->field_media_transcript->view(['label' => 'hidden']);
      $variables['transcript'] = $transcript; 
    }
  }
}
